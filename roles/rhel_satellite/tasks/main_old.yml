---

- name: rescanning for new disks
  shell: /usr/bin/rescan-scsi-bus.sh
  when: config_lvm and ansible_os_family == "RedHat"

- name: creating new LVM volume group
  lvg: vg={{ create_vgname }} pvs={{ new_disk }} state=present
  when: create and config_lvm

- name: creating new LVM logical volumes
  lvol:
    vg={{ create_vgname }}
    lv={{ create_cache_lv }}
    size={{ cache_lvsize }}
  when: create and config_lvm

- name: creating new LVM logical volumes
  lvol:
    vg={{ create_vgname }}
    lv={{ create_mongodb_lv }}
    size={{ mongodb_lvsize }}
  when: create and config_lvm

- name: creating new LVM logical volumes
  lvol:
    vg={{ create_vgname }}
    lv={{ create_pgsql_lv }}
    size={{ pgsql_lvsize }}
  when: create and config_lvm

- name: creating new LVM logical volumes
  lvol:
    vg={{ create_vgname }}
    lv={{ create_pulp_lv }}
    size={{ pulp_lvsize }}
  when: create and config_lvm

- name: creating new filesystem on new LVM logical volume
  filesystem:
     fstype={{ filesystem }} dev=/dev/{{ create_vgname }}/{{ create_cache_lv }}
  when: create and config_lvm

- name: creating new filesystem on new LVM logical volume
  filesystem:
     fstype={{ filesystem }} dev=/dev/{{ create_vgname }}/{{ create_pulp_lv }}
  when: create and config_lvm

- name: creating new filesystem on new LVM logical volume
  filesystem:
     fstype={{ filesystem }} dev=/dev/{{ create_vgname }}/{{ create_mongodb_lv }}
  when: create and config_lvm

- name: creating new filesystem on new LVM logical volume
  filesystem:
     fstype={{ filesystem }} dev=/dev/{{ create_vgname }}/{{ create_pgsql_lv }}
  when: create and config_lvm

- name: mount pulp_cache
  mount: name={{ mnt_pulp_cache}} src=/dev/{{ create_vgname }}/{{ create_cache_lv }} fstype={{ filesystem }} state=mounted
  when: create and config_lvm

- name: mount pulp
  mount: name={{ mnt_pulp }} src=/dev/{{ create_vgname }}/{{ create_pulp_lv }} fstype={{ filesystem }} state=mounted
  when: create and config_lvm

- name: mount mongodb
  mount: name={{ mnt_mongodb }} src=/dev/{{ create_vgname }}/{{ create_mongodb_lv }} fstype={{ filesystem }} state=mounted
  when: create and config_lvm

- name: mount pgsql
  mount: name={{ mnt_pgsql }} src=/dev/{{ create_vgname }}/{{ create_pgsql_lv }} fstype={{ filesystem }} state=mounted
  when: create and config_lvm

- name: installing satellite
  yum:
    name: satellite
    disablerepo: "*"
    enablerepo: "rhel-7-server-rpms,rhel-server-rhscl-7-rpms,rhel-7-server-satellite-6.3-rpms"
    state: present

#
# Configure Firewall for RH Satellite
#
- name: SATELLITE | firewall | Enable service in firewall
  firewalld:
    service: "RH-Satellite-6"
    permanent: yes
    state: enabled

- name: Bounce firewalld
  service:
     name=firewalld
     state=restarted


## Initial configuration of Satellite Server
## Enable Standard repos
- name: enable Repos
  command: subscription-manager repos --enable {{ item }}
  with_items:
   - rhel-7-server-rpms
   - rhel-7-server-satellite-6.3-rpms
   - rhel-server-rhscl-7-rpms
  when: enable_repos

- name: Initial configuration of Satellite
  command:  /usr/sbin/satellite-installer --scenario satellite --foreman-initial-organization "{{ sat_org }}" --foreman-initial-location "{{ sat_location }}" --foreman-admin-username "{{ vault_sat_admin_name }}" --foreman-admin-password "{{ vault_sat_admin_pwd }}"

- name: SATELLITE | upload_manifest | Copy mainfiest file to Satellite server
  copy:
    src: "satellite_manifest.zip"
    dest: /root/satellite_manifest.zip
    mode: 0644
    owner: root
    group: root

- name: SATELLITE | upload_manifest | Upload manifest to Satellite server
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" subscription upload --organization "{{ sat_org }}"  --file /root/satellite_manifest.zip

- name: SATELLITE | Set Default sync policy to "immediate"
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" settings set --name default_download_policy --value immediate

- name: SATELLITE | Subscribe RHEL 7 RPMs
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" repository-set enable --organization "{{ sat_org }}" --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server (RPMs)'

- name: SATELLITE | Subscribe RHEL 7 Optional RPMs
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" repository-set enable --organization "{{ sat_org }}" --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server - Optional (RPMs)'

- name: SATELLITE | Subscribe RHEL 7 Extras RPMs
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" repository-set enable --organization "{{ sat_org }}" --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Enterprise Linux 7 Server - Extras (RPMs)'

- name: SATELLITE | Subscribe Satellite tools 6.3
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" repository-set enable --organization "{{ sat_org }}" --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Satellite Tools 6.3 (for RHEL 7 Server) (RPMs)'

- name: SATELLITE | Subscribe Cloudforms ME 5.9
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" repository-set enable --organization "{{ sat_org }}" --product 'Red Hat CloudForms' --basearch='x86_64' --name 'Red Hat CloudForms Management Engine 5.9 (RPMs)'

- name: SATELLITE | Subscribe RHEL Fast Datapath
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" repository-set enable --organization "{{ sat_org }}" --product 'Red Hat Enterprise Linux Fast Datapath' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux Fast Datapath (RHEL 7 Server) (RPMs)'

- name: SATELLITE | Subscribe Red Hat OpenShift Container Platform
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" repository-set enable --organization "{{ sat_org }}" --product 'Red Hat OpenShift Container Platform' --basearch='x86_64' --name 'Red Hat OpenShift Container Platform 3.7 (RPMs)'

- name: Sync all repos in the Red Hat Enterprise Linux Server product
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" product synchronize --organization-label "{{ sat_org }}" --name "Red Hat Enterprise Linux Server" --async

- name: Sync all repos in the CLOUDFORMS product
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" product synchronize --organization-label "{{ sat_org }}" --name "Red Hat CloudForms" --async

- name: Sync all repos in the RHEL FAST Datapath product
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" product synchronize --organization-label "{{ sat_org }}" --name "Red Hat Enterprise Linux Fast Datapath" --async

- name: Sync all repos in the RH OCP product
  command: /usr/bin/hammer --password "{{ vault_sat_admin_pwd }}" product synchronize --organization-label "{{ sat_org }}" --name "Red Hat OpenShift Container Platform" --async
